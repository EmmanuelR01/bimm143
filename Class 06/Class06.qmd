---
title: "Class 06"
author: "Emmanuel R."
format: pdf
---

In

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput”


```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We can use the `mean` function to calculate the average for a given student vector.

```{r}
mean(student1)
```
We can use the na.em=TRUE argument to remove NA values before calculating the mean.
```{r}
mean(student2, na.rm=TRUE)
```

This code is from Chapt gpt but doesn't drop the lowest score.
```{r}
student3[which(is.na(student3) & seq_along(student3) > 1)] <- 0
mean(student3, na.rm = TRUE)
```

It is time to work with a new temporary object (that I will call `x`) so I don't crew up my original objects.
```{r}
x <- student3
x[ is.na(x)] <- 0
mean(x)
```


Finally we want to drop the before calculating the mean. This is the equivalent to allowing the studetn to drop thier worst assignment score.
```{r}
y <- student1
y
mean(y[-which.min(y)])
```

No I need to put this all together to make our working snippet: 
```{r}
# Map/Replace NA values to zero
x[ is.na(x)] <- 0

# Exclude the Lowest score
x[-which.min(x)]

# Calculate the mean
mean(x[-which.min(x)])

```

Cool! This is my working snippet that I can turn into a function called `grade`


All functions in R have at least 3 things:

- **Name**, in our case "grade"
- Input **arguments**, student1 etc. 
- **Body**, this is our working snippet above.


```{r}
grade <- function(x) {
# Map/Replace NA values to zero
x[ is.na(x)] <- 0

# Exclude the Lowest score
x[-which.min(x)]

# Calculate the mean
mean(x[-which.min(x)])
}
```

Can I use this function now?
```{r}
grade(student1)
```

Read a gradebook from online:
```{r}
hw <- read.csv("https://tinyurl.com/gradeinput", row.name=1)
hw
```


We can use the `apply()` function to grade all the students in this class with our new `grade()` function.


The `apply()` functions 

```{r}
ans <- apply(hw, 1, grade)
ans
```


Apply(data, margin=1(rows or 2 columns), function)

> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
ans[which.max(ans)]
```


> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]


```{r}
ave.scores <- (apply(hw, 2, mean, na.rm=TRUE))
which.min(ave.scores)
```


```{r}
tot.scores <- apply(hw, 2, sum, na.rm=TRUE)
which.min(tot.scores)
```


```{r}
tot.scores
ave.scores
```


> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
hw$hw1
```

If I try on hw2 I get NA as there are missing grades
```{r}
cor(hw$hw1, ans)
cor(hw$hw2, ans)

```


I will mask all the NA values to zero:
```{r}
mask <- hw
mask[is.na(mask)] <- 0

```

```{r}
cor(mask$hw5, ans)
```


```{r}
apply(mask, 2, cor, y=ans)
```


















