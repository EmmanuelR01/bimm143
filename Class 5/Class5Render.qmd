---
title: "Class 5: Data Visualization"
author: "Emmanuel - A17188132"
format: pdf
---

## Base R Graphics vs ggplot2

There are many graphic systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package.

To compare these let's play with inbuilt `cars` data set.

```{r}
head(cars)
```

To use "base" R I can simply cal the `plot()` function: 

```{r}
plot(cars)
```

To use `ggplot2` package I first need to install it with the function `install.packages("ggplot2")`. 

I will run this in my R console (i.e. the R brain) as I do not want to re-install it every time I render my report...

The main function in this package is called `ggplot()`. Can I just call it.

```{r}
library(ggplot2)
ggplot()
```


To make a figure with a ggplot I need always at least 2 things:

- **data** (i.e. what I want to plot)
- **aes** the asthetic mapping of the data to the plot I want. 
- the **geoms** i.e How I want to plot the data.


```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
  geom_point() 
```

If I want to add more stuff I can just keep adding more layers

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth()
```


GGplot is much more verbose than base R plots for standard plots but it has a consistent layer system that I can use to make just about any plot 

Let's make a plot with a straight 

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(se=FALSE, method="lm") +
  labs(title="Stopping distance for old cars", subtitle = "From the inbuilt cars dataset", caption = "BIMM 143", x = "Speed (mpg)", y = "Stopping Distance (ft)") +
  theme_bw()
```


## A more complicated plot 

Let's plot some gene expression data. 

The code below reads the results of a differential expression analysis where a new anti-viral drug is being tested.

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```


> Q. How many genes are in this dataset?

```{r}
nrow(genes)
```

> Q. How can we summarize that last column - the "state" column?

```{r}
table(genes$State)
```

```{r}
p <- ggplot(data=genes) +
  aes(x= Condition1, y= Condition2, color= State) +
  geom_point()

```


I can now call `p` when I want to plot or add to it.

```{r}
p + labs(title= "Gene Expression Changes Upon Drug Treatment", x= "Control", y= "Drug Treated") +
  scale_color_manual(values= c("blue", "gray", "red"))
```

## Going Further

Here I read a slightly larger dataset

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```


```{r}
ggplot(gapminder) +
  aes(x= gdpPercap, y= lifeExp, col= continent, size= pop) +
  geom_point(alpha= 0.3)
```


A very useful layer to add sometimes is for "faceting". 

```{r}
ggplot(gapminder) +
  aes(x= gdpPercap, y= lifeExp, col= continent, size= pop) +
  geom_point(alpha= 0.3) +
  facet_wrap(~continent)
```







