---
title: "Class 12"
author: "Emmanuel Robles"
format: pdf
---
# Import the data

We need two things for this analysis:
- countdata (counts for every transcript/gene in each experiment)
- coldata (metadata that describes the experimental setup)

```{r}
countData <- read.csv("airway_scaledcounts.csv", row.names=1)
head(countData)
```

```{r}
metadata <-  read.csv("airway_metadata.csv")
head(metadata)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(countData)
```
> Q2. How many "control" cell lines do we have?

```{r}
table(metadata$dex)
```
Another method
```{r}
sum(metadata$dex == "control")
```

- Step 1 
Calculate the mean of the control sample
Calculate the mean of the trated samples

(a) We need to find which columns in countData are "control" samples.
  - Look in the metadata (a.k.a. colData), $dex column
  
```{r}
control.ind <- metadata$dex == "control"
```
  
(b) Extract all the control columns from `countData` and call it `control.counts`
```{r}
control.counts <- countData[ ,control.ind]
```

(c) Calculate the mean values across the rows of `control` and calculate the mean count values 
```{r}
control.means <- rowMeans(control.counts)
head(control.means)
```

- Step 2 
Calculate the mean of the treated samples...
```{r}
treated.ind <- metadata$dex == "treated"
treated.counts <- countData[ ,treated.ind]
treated.means <- rowMeans(treated.counts)
head(treated.means)
```

We now have control and treated mean count values, For ease of keeping I will combine these vectors into a new data.frame `meancounts`.

```{r}
meancounts <- data.frame(control.means, treated.means)
head(meancounts)
```

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")

```

```{r}
plot(meancounts, log="xy")
```


We use log transforms for skewed data such as this ans because we really care most about relative changes in magnitude.

```{r}
log2(20/20)
```
If I have half the amount I will have log2 fold-change of -1
```{r}
log2(10/20)
```
If I have double the amount (20 compared to 10), change of +1
```{r}
log2(20/10)
```


```{r}
meancounts$log2fc <- log2(meancounts$treated.means / meancounts$control.means)
```

> Q. How many genes are upregulated at the common threshold of +2 log2FC values?

```{r}
sum(meancounts$log2fc >= 2, na.rm=TRUE )
```


## DESeq2

```{r}
library(DESeq2)
```


```{r}
dds <- DESeqDataSetFromMatrix(countData = countData, 
                              colData = metadata, 
                              design = ~dex)
```

To run the analysis I can now use the main DESeq2 function called `DESeq()` with `ads` as input.

```{r}
dds <- DESeq(dds)
```

To get the results back from this object we can use the `results()` function from the package.

```{r}
res <- results(dds)
head(res)
```

Let's make a final (for today) plot of log2 fold-change vs the adjusted p-value. 

```{r}
plot(res$log2FoldChange, res$padj)
```

It is the low p-values that we care about and these are lost in to our skewed plot above. 

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(+2, -2), col="blue")
abline(h= -log(0.5), col="blue")

```

Finally we can make a color vector to use in the plot to highlight the genes we care about.

```{r}
mycols <- rep("grey", nrow(res))
mycols[abs(res$log2FoldChange) >= 2] <- "red"
mycols[res$padj] <- "grey"
#mycols

plot(res$log2FoldChange, -log(res$padj), col= mycols)
abline(v=c(+2, -2), col="blue")
abline(h= -log(0.5), col="blue")
```

Still to do

```{r}
head(res)
```
## Adding annotation data


We can use AnnotateDbi to add annotation data such as gene idnetifiers from different sources.
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

We can translate(map) to differetn formats
```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```
```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")
```


```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```


## Save our results to date

```{r}
write.csv(res, file= "myresults.csv")
```

## Pathway analysis
We can use the KEGG database of biological pathways to get some insight in order to get some more information about what the genes do/ how they function.

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

```

```{r}
head(res$entrez)
```


New vector, fold-change values. Will be used as input for `gage`

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)

```


![](hsa05310.pathview.png)













